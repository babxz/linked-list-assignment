#include <iostream>

struct Node {
    int data;
    Node* next;

    Node(int value) : data(value), next(nullptr) {}
};
class LinkedList {
private:
    Node* head;

public:
    LinkedList() : head(nullptr) {}

    // Insert a node in the middle of the list
    void insertMiddle(int data) {
        Node* newNode = new Node(data);
        if (!head) {
            head = newNode;
            return;
        }

        Node* slow = head;
        Node* fast = head;

        // Find the middle using slow and fast pointer technique
        while (fast && fast->next) {
            slow = slow->next;
            fast = fast->next->next;
        }

        // Insert the new node in the middle
        newNode->next = slow->next;
        slow->next = newNode;
    }

    // Delete the middle node
    void deleteMiddle() {
        if (!head) return; // List is empty

        if (!head->next) {
            delete head; // List has only one node
            head = nullptr;
            return;
        }

        Node* slow = head;
        Node* fast = head;
        Node* prev = nullptr;

        // Find the middle node using slow and fast pointer technique
        while (fast && fast->next) {
            prev = slow;
            slow = slow->next;
            fast = fast->next->next;
        }

        // Delete the middle node
        if (prev) {
            prev->next = slow->next;
            delete slow; // Free memory
        }
    }

    // Print the linked list
    void printList() const {
        Node* current = head;
        while (current) {
            std::cout << current->data << " -> ";
            current = current->next;
        }
        std::cout << "nullptr" << std::endl;
    }

    // Destructor to free memory
    ~LinkedList() {
        while (head) {
            Node* temp = head;
            head = head->next;
            delete temp;
        }
    }
};
